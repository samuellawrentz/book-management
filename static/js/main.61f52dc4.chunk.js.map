{"version":3,"sources":["components/header.tsx","helpers/api.ts","app/reducer.ts","views/list-books.tsx","views/book-detail.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["Header","props","bhistory","useHistory","className","onClick","push","style","cursor","placeholder","type","value","searchTerm","onChange","e","setSearchTerm","target","apiEndpoint","ApiHelper","fetch","then","json","books","method","headers","body","defaultBook","name","author","description","count","AppSlice","createSlice","initialState","selectedBook","reducers","addBook","state","action","index","findIndex","book","payload","console","log","JSON","stringify","writeBooks","udpateSelectedBook","updateBooks","filteredBooks","filter","oldName","newBook","setBooks","deleteBook","actions","selectBooks","selectSelectedBook","ListBooks","dispatch","useDispatch","useSelector","sortedBooks","sort","a","b","localeCompare","toLowerCase","startsWith","groupedBooks","reduce","acc","currentItem","to","Object","values","map","group","BookDetail","history","textAreaRef","React","useRef","document","createElement","actionType","isView","isEditable","initialBook","useState","currentBook","setCurrentBook","handleChange","event","useEffect","current","setAttribute","scrollHeight","view","edit","add","window","confirm","setTimeout","readOnly","rows","ref","onInput","height","App","readBooks","data","parse","path","render","component","store","configureStore","reducer","appReducer","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.61f52dc4.chunk.js","sourcesContent":["import React from \"react\"\nimport { useHistory } from \"react-router\"\n\nexport const Header = (props: any) => {\n    const bhistory = useHistory();\n    return (\n        <header>\n            <div className=\"header container\">\n                <div className=\"header flex\">\n                    <h1 onClick={()=>bhistory.push('/')} style={{cursor: \"pointer\"}}>Book Management</h1>\n                    <div className=\"action-buttons flex\">\n                        <div className=\"flex\"><i className=\"fa fa-search\"></i><input placeholder=\"Search Books\" type=\"text\" className=\"search\" value={props.searchTerm} onChange={(e)=>props.setSearchTerm(e.target.value)}/></div>\n                    </div>\n                </div>\n            </div>\n        </header>\n    )\n}","const apiEndpoint = 'https://book-management-backend.herokuapp.com/'\nexport class ApiHelper {\n    static readBooks() {\n        return fetch(apiEndpoint + 'getbooks').then(value => value.json());\n    }\n    static writeBooks(books: string) {\n        return fetch(apiEndpoint+'writebooks', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: books\n        });\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from './store';\nimport { IBook, IUpdateBook, IAppState } from \"../helpers/interfaces\";\nimport { ApiHelper } from \"../helpers/api\";\n\nconst initialState: IAppState = {\n    books: [],\n    selectedBook: null\n};\n\nexport const defaultBook: IBook = {\n    name: 'New Book',\n    author: 'Myself',\n    description: 'This is a placeholder for a new book. Please add the details and submit to add the book to the database. Have a nice day!',\n    count: 1\n}\n\n// Initialize Redux Reducer and Actions\nexport const AppSlice = createSlice({\n    name: 'AppState',\n    initialState,\n    reducers: {\n        // Various actions that are available to modify the Redux State\n        addBook: (state, action: PayloadAction<IBook>) => {\n            const index = state.books.findIndex(book => book.name === action.payload.name);\n            console.log(index, action.payload.name);\n            \n            if (index !== -1)\n                state.books[index].count = (state.books[index].count || 1) + 1;\n            else\n                state.books.push(action.payload);\n                console.log(JSON.stringify(state.books));\n            ApiHelper.writeBooks(JSON.stringify(state.books));\n        },\n        udpateSelectedBook: (state, action: PayloadAction<IBook>) => {\n            state.selectedBook = action.payload;\n        },\n        updateBooks: (state, action: PayloadAction<IUpdateBook>) => {\n            const filteredBooks = state.books.filter(book => book.name !== action.payload.oldName);\n            state.books = [...filteredBooks, action.payload.newBook];\n            ApiHelper.writeBooks(JSON.stringify(state.books));\n        },\n        setBooks: (state, action: PayloadAction<any>) => {\n            state.books = action.payload;\n        },\n        deleteBook: (state, action: PayloadAction<IBook>) =>{\n            state.books = state.books.filter(book => book.name !== action.payload.name);\n            ApiHelper.writeBooks(JSON.stringify(state.books));\n        }\n    },\n});\n\n// Export the actions that are available\nexport const { addBook, udpateSelectedBook, updateBooks, setBooks, deleteBook } = AppSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file.\nexport const selectBooks = (state: RootState) => state.books;\nexport const selectSelectedBook = (state: RootState) => state.selectedBook;\n\nexport default AppSlice.reducer;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { IBook } from \"../helpers/interfaces\";\nimport { selectBooks } from \"../app/reducer\";\nimport { udpateSelectedBook } from \"../app/reducer\";\nexport const ListBooks = (props: any) => {\n    const dispatch = useDispatch();\n    // Sort and group books alphabetically\n    const books = useSelector(selectBooks);\n    let sortedBooks = [...books].sort((a, b) => a.name.localeCompare(b.name));\n    props.searchTerm && (sortedBooks = sortedBooks.filter(book=> book.name.toLowerCase().startsWith(props.searchTerm.toLowerCase())))\n    const groupedBooks = sortedBooks.reduce((acc: any, currentItem) => {\n        let index = currentItem.name[0];\n        if (!acc[index]) acc[index] = { index, books: [currentItem] }\n        else acc[index].books.push(currentItem);\n        return acc;\n    }, {});\n\n    return (\n       <div className=\"list-holder\">\n           <div className=\"flex\">\n               <h2>List of Available books</h2>\n               <div className=\"action-holder\">\n                        <Link to=\"/add\" className=\"btn btn-outline\">Add Book</Link>\n                    </div>\n               </div>\n           <div className=\"books-list\">\n           {\n                Object.values(groupedBooks).map((group: any) => {\n                    return (\n                        <div className=\"group-holder\">\n                            <div className=\"group-header\">{group.index}</div>\n                            <div className=\"books-holder\">\n                                {group.books.map((book: IBook) => {\n                                    return (\n                                        <Link className=\"book-holder\" key={book.name} to=\"/detail\" onClick={()=>{dispatch(udpateSelectedBook(book))}}>\n                                            <div className=\"flex\">\n                                                <i className=\"fa fa-book\"></i>\n                                                <div className=\"details\">\n                                                    <div className=\"book-name\">\n                                                        {book.name}\n                                                    </div>\n                                                    <div className=\"book-author\">\n                                                        {book.author}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </Link>\n                                    )\n                                })}\n                            </div>\n                        </div>\n                    )\n                })\n            }\n           </div>\n       </div>\n\n    )\n}","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { addBook, selectSelectedBook, udpateSelectedBook, updateBooks, defaultBook, deleteBook } from \"../app/reducer\";\n\nexport const BookDetail = (props: { type: string }) => {\n    const selectedBook = useSelector(selectSelectedBook);\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const textAreaRef = React.useRef<HTMLTextAreaElement>(document.createElement(\"textarea\"));\n    let actionType = props.type || 'view';\n    const isView = actionType === 'view';\n    const isEditable = actionType === 'edit' || actionType === 'add';\n    const initialBook = actionType === 'add' ? defaultBook : selectedBook;\n    const [currentBook, setCurrentBook] = useState(initialBook as any);\n\n    const heading: { [prop: string]: string } = {\n        view: 'Book Details',\n        edit: 'Edit Book',\n        add: 'Add new Book'\n    }\n\n    // Handle edits to the book\n    const handleChange = (event: any) => {\n        const target = event.target;\n        const name = target.name;\n        setCurrentBook({\n            ...currentBook,\n            [name]: target.value\n        });\n    }\n    // Update State and Backend API\n    const updateBook = () => {\n        dispatch(updateBooks({ oldName: selectedBook?.name, newBook: currentBook }))\n        dispatch(udpateSelectedBook(currentBook));\n        history.push('/detail');\n    }\n    // Add new Book to State and update to API\n    const addNewBook = () => {\n        dispatch(addBook(currentBook));\n        setTimeout(() => history.push('/list'), 1000)\n    }\n    // Dynamic text area height\n    const onTextInput = () => {\n        textAreaRef.current.style.height = 'auto';\n        textAreaRef.current.style.height = (textAreaRef.current.scrollHeight) + 'px';\n    }\n\n    // ComponentDidMount using Hooks\n    // Set the height of the text area\n    useEffect(() => {\n        textAreaRef.current.setAttribute('style', 'height:' + (textAreaRef.current.scrollHeight) + 'px;overflow-y:hidden;');\n    }, [])\n\n    return (\n        <div className={\"book-detail-holder \" + actionType}>\n            <div>\n                <div className=\"flex\">\n                    <h2 onClick={() => history.push('/list')} style={{ cursor: \"pointer\" }}><i className=\"fa fa-arrow-left back\"></i></h2>\n                    <h2>{heading[actionType]}</h2>\n                    <div className=\"action-holder flex\">\n                        {actionType === 'view' && <div className=\"btn btn-outline\" onClick={() => {\n                            const result = window.confirm('Are you sure? This action will delete this book.');\n                            if (result) {\n                                dispatch(deleteBook(currentBook));\n                                history.push('/list');\n                            }\n                        }}>Delete</div>}\n                        {actionType === 'view' && <Link to=\"/edit\" className=\"btn btn-outline\">Edit</Link>}\n                        {isEditable && <div className=\"btn btn-outline\" onClick={() => { actionType === 'edit' && setCurrentBook(selectedBook); history.push(actionType === 'add' ? '/list' : '/detail') }}>Cancel</div>}\n                        {isEditable && <div className=\"btn btn-primary\" onClick={actionType === 'edit' ? updateBook : addNewBook}>{actionType === 'edit' ? 'Done' : 'Add'}</div>}\n                    </div>\n                </div>\n            </div>\n            <div className=\"detail-holder\">\n                <div className=\"title-desc flex\">\n                    <i className=\"fa fa-file-text\"></i>\n                    <div className=\"title-author\">\n                        <input className=\"book-name\" type=\"text\" value={currentBook?.name} readOnly={isView} onChange={handleChange} name=\"name\"></input>\n                        <div>by <input type=\"text\" value={currentBook?.author} name=\"author\" className=\"author-input\" readOnly={isView} onChange={handleChange} /></div>\n                    </div>\n                </div>\n                <div className=\"description\">\n                    <strong>Description:</strong>\n                    <p><textarea value={currentBook?.description} readOnly={isView} rows={2} onChange={handleChange} name=\"description\" ref={textAreaRef} onInput={onTextInput} /></p>\n                </div>\n                <div className=\"count\">\n                    <strong>No of Books:</strong>\n                    <p><input type=\"number\" value={currentBook?.count} readOnly={isView} onChange={handleChange} name=\"count\" /></p>\n                </div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\r\nimport { Header } from \"./components/header\";\r\nimport { ListBooks } from \"./views/list-books\";\r\nimport { BookDetail } from \"./views/book-detail\";\r\nimport { Switch, Redirect, Route } from \"react-router-dom\";\r\nimport { ApiHelper } from './helpers/api';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setBooks, } from \"./app/reducer\";\r\n\r\nfunction App() {\r\n  const [searchTerm, setSearchTerm] = useState();\r\n  const dispatch = useDispatch();\r\n\r\n  // Initialize Books from the API\r\n  useEffect(() => {\r\n    ApiHelper.readBooks().then(data => dispatch(setBooks(JSON.parse(data))));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header setSearchTerm={setSearchTerm} searchTerm={searchTerm}></Header>\r\n      <div className=\"container\">\r\n        <div className=\"content-holder\">\r\n          <Switch>\r\n            <Route path=\"/list\" render={() => <ListBooks searchTerm={searchTerm}></ListBooks>}></Route>\r\n            <Route path=\"/detail\" component={BookDetail}></Route>\r\n            <Route path=\"/edit\" render={() => <BookDetail type=\"edit\"></BookDetail>}></Route>\r\n            <Route path=\"/add\" render={() => <BookDetail type=\"add\"></BookDetail>}></Route>\r\n            <Redirect to=\"/list\"></Redirect>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport appReducer from './reducer';\r\n\r\n// Configure Redux Store from the Reducer\r\nexport const store = configureStore({\r\n  reducer: appReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <HashRouter>\r\n        <App />\r\n      </HashRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}